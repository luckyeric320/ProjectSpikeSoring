调用：
from ddlraw import Raw
from ddldetect import Detect
from ddlsorted import Sorted
from ddlneurons import Neurons

class Raw:
存储原始波形数据

主要参数：
data
numpy.array，原始波形数据，采样点数*通道数

n_channels
int，通道数量

Fs
float或int，采样率（Hz）

unit
str，幅度单位，“uV”或“mV”或“V”

time_length
float，记录的时长（单位：s）

channels_names
list of str，每个通道的名称，默认值为'序号'

channels_locs
numpy.array，每个通道的位置，以（x,y,z）坐标表示，默认值为（0,0,0），通道数*3

主要方法：
select_channels_by_index(channel_list=list of int)
根据序号选取部分通道
返回一个新的Raw实例

select_channels_by_name(channel_list=list of str)
根据通道名称选取部分通道
返回一个新的Raw实例

set_unit(unit)
设置幅度的单位

set_channels_names(names)
设置通道的名称，要求输入list of str

set_channels_locs(locs)
设置通道的坐标位置，要求输入numpy.array（通道数*3）

scale(gain,drift)
将数据先缩放到原来的gain倍，再向上移动drift

get_LFP()
对数据进行1Hz~300Hz滤波
返回一个新的Raw实例

get_spikes()
对数据进行300Hz~6000Hz滤波
返回一个新的Raw实例

extract_by_median(k)
使用绝对值中位数的k倍为阈值，提取锋电位数据（以峰值为中心，总长度2ms）
返回Detect实例

sort_by()
调用指定的方法对数据进行尖峰电位分类
返回一个Neurons类实例

class Detect:
存储检测到的峰值数据

主要参数：
waveforms
list of numpy.array，每个通道提取到的所有锋电位波形，通道数*（锋电位数*采样点数）

tiem_points
list of numpy.array，每个通道提取到的所有锋电位的时刻（单位：s），通道数*（锋电位数）

n_spikes
list，每个通道提取到的锋电位数量

Fs,unit,time_length,channels_names,channels_locs,n_channels同Raw

主要方法：
mannual_select_by_peaks(ch,lowest,highest)
ch为list of int，为需要改变的通道的序号，lowest和highest为与ch相同长度的list of int或float，表示每个电极上想要保留的峰值范围
返回一个新的Detect实例，未包含在ch里的通道上的数据不变

sort_by_natural_break()
使用jenks自然断点法依据峰值大小进行锋电位分类，返回Sorted实例

class Sorted
以通道为单位存储锋电位分类后的数据

主要参数：
result
list of list of numpy.array，每个通道、每个推定神经元的每个锋电位波形，通道数*（神经元数*（锋电位数*采样点数））

time_points
list of list of numpy.array，每个通道、每个推定神经元发放的时间点，通道数*（神经元数*（锋电位数））

n_neurons
numpy.array，每个通道上的推定神经元数量

firing_rate
list of numpy.array，每个通道上、每个神经元的发放率（单位：Hz），通道数*（神经元数）

neuron_id
list of list of str，每个通道上分类出的神经元的名称，通道数*神经元数，若多个通道上记录到同一个神经元，则对应的神经元名称相同

Fs,unit,time_length,channels_names,channels_locs,n_channels同Raw

主要方法：
plot_neuron(ch)
ch为list of int，绘制序号为ch[i]的通道上每个神经元的每次及平均锋电位波形

to_Neurons()
将Sorted类实例转换成Neurons类实例，返回Neurons类实例

class Neurons
以神经元为单位存储锋电位分类后的数据

主要参数：
result
list of numpy.array，每个推定神经元在所有记录到它的通道上的每个锋电位波形，神经元数*（记录到该神经元的通道数*锋电位数*采样点数）

time_points
list of numpy.array，每个推定神经元发放的时间点，神经元数*（锋电位数）

n_neurons
list of int，推定神经元的数量

firing_rate
numpy.array，每个神经元的发放率（单位：Hz）

neuron_id
list of str，每个分类出的神经元的名称

channel_id
list of list of str，对每个神经元，记录到它的每个通道的名称，与channel_names一致，神经元数*记录到该神经元的通道数

neurons_locs
numpy.array，每个神经元的重心坐标，依据神经元在记录到它的每个通道上的幅值与通道的位置加权平均得到

neurons_info
list，每个神经元的额外信息

Fs,unit,time_length,channels_names,channels_locs,n_channels同Raw

主要方法：
to_Sorted()
将Neurons类实例转换成Sorted类实例，返回Sorted类实例

find_bursts(thr)
基于模板匹配的方法寻找被初始分类遗漏的成簇发放的动作电位，需手动设置阈值thr，返回新的Neurons类实例（不成熟，慎用）

get_firing_rate(timestep)
以timestep为时间窗长度计算神经元发放率随时间的变化，返回numpy.array（神经元数*时间窗数）

plot_neurons_locs(time,title,sort_by_gamma=False,gamma=None)
绘制通道位置（正方形）及推定神经元（星形）的位置，星形的颜色表示time范围内的发放率，若time=='all'，则为平均发放率；若sort_by_gamma==True，gamma>0.8者使用红色，其他使用绿色

plot_neurons_spikes(n_id,gamma=None)
若n_id == 'all'，绘制所有神经元在每个通道上的波形及平均波形；若n_id == 'gamma'，按gamma顺序绘制；若n_id为int或str，绘制指定神经元在每个通道上的波形及平均波形

其他方法：

ddlsorters.compare_sorter_results(Neurons1,Neurons2)
计算两种方法得到的分类结果之间的相似度（gamma值），返回numpy.array，Neurons1神经元数*Neurons2神经元数，第i,j处表示Neurons1中第i个神经元和Neurons2中第j个神经元之间的gamma值，gamma值越大，相似度越高